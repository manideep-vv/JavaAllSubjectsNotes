package com.fresco.dbrestapi.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Optional;

import com.fresco.dbrestapi.model.Post;
import com.fresco.dbrestapi.model.Userposts;
import com.fresco.dbrestapi.repo.UserpostsRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class ApiController {

	@Autowired
	UserpostsRepository postsRepo;
	
	@RequestMapping("/addpost")
	public String post(String postBody, String user) {
		Userposts userposts=new Userposts();
		userposts.set_id(user);
		
		ArrayList<Post> posts=new ArrayList<>();
		Post post=new Post();
		post.setPostBody(postBody);
		posts.add(post);
		
		userposts.setPosts(posts);
		postsRepo.save(userposts);
		return "OK 200";
	}
	
	@RequestMapping("/getposts")
	public Object[] getPosts(String user) {
	
		Optional<Userposts> userposts=postsRepo.findById(user);
		Object[] obj=new Object[userposts.get().getPosts().size()];
		for(int i=0;i<userposts.get().getPosts().size();i++) {
			obj[i]=userposts.get().getPosts().get(i);
		}
		return obj;
	}
	
	@RequestMapping("/delpost")
	public String delPosts(String user, String postId) {
		Optional<Userposts> userposts= postsRepo.findById(user);
		ArrayList<Post> pst=new ArrayList<Post>();
		for(int i=0; i<userposts.get().getPosts().size();i++) {
			Post post=new Post();
			if(userposts.get().getPosts().get(i).getPostId()!=Integer.parseInt(postId)) {
				post.setPostBody(userposts.get().getPosts().get(i).getPostBody());
				post.setPostId(userposts.get().getPosts().get(i).getPostId());
				post.setPostDate(userposts.get().getPosts().get(i).getPostDate());
				pst.add(post);
			}
		}
		
		userposts.get().setPosts(pst);
		postsRepo.save(userposts.get());
		return "OK 200";
	}

	//@RequestMapping("/searchuser")
	public HashMap<String, Boolean> searchUser(String user, String searchText){
		
		HashMap<String, Boolean> hashmap=new HashMap<String, Boolean>();
		Optional<Userposts> userposts=postsRepo.findById(user);
		for(int i=0; i<userposts.get().getSubscribed().size();i++) {
			if(userposts.get().getSubscribed().get(i).startsWith(searchText)) {
				hashmap.put(userposts.get().getSubscribed().get(i), true);
			}
			else {
				hashmap.put(userposts.get().getSubscribed().get(i), false);
			}
		}
		return hashmap;
	}
	
//	@RequestMapping("/subscriber")
	public String subscriber(String user, String subuser) {
		Optional<Userposts> userposts=postsRepo.findById(user);
		int flag=-1;
		for(int i=0; i<userposts.get().getSubscribed().size();i++) {
			if(userposts.get().getSubscribed().get(i).equals(subuser)) {
				flag=i;
			}
		}
		
		if(flag>-1) {
			userposts.get().getSubscribed().remove(flag);
		}else {
			userposts.get().getSubscribed().add(subuser);
		}
		
		postsRepo.save(userposts.get());
		
		return "OK 200";
	}
	}




