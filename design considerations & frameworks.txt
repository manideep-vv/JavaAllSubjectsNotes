1) if u have more application traffic then use spring reactive - so that no thread will be free in thread pool
if ur project is making more api calls then all threads in thread pool will be waiting for io operations due to synchroonus blocking behaviour so use spr reactive in this case
2) Batching--if u want process in batch - use spr batch or use bulk insertion mechanisms
3) when u are using mongo db then use reactive mongodb  - mongodb supports reactive connectivity 
4) REactive way -->if ur application is doing more rest calls and if it is talking more processing time then use spring reactive
Asynchronous calls: Explore asynchronous libraries like CompletableFuture or RxJava to make non-blocking API calls. This allows your application to continue processing while waiting for API responses.
5) catching - Implement caching mechanisms to store frequently accessed data locally. This reduces the number of API calls needed. 
Libraries like EHCACHE (Java's Most Widely-Used Cache)
, Caffeine or Guava Cache can be helpful
from consumer side u dont make any same calls
from producer side also cache the req, res - if same req comes, if u dont process instead fetch it from cache and return to consumer
6) if u are designing restful apis use open api- ifu cant write spec atleast genereate open api spec by adding spring doc jars in pom 
those can generate spec so that we can give that spec to other and they can see our api details - like uri, parameters, security for each method and return types... status and responses for each status

frameworks
----------
1) mapstruct jar is used to copy the data from one bean to other bean / 1 class to another class
mapstruct is an annotation based obj mapper -
2) xml sec - this jar is used to encrpyt the elements present in xml https://santuario.apache.org/secadv.html https://santuario.apache.org/javaindex.html
<?xml version='1.0'?>
  <PaymentInfo xmlns='http://example.org/paymentv2'>     ---  
    <Name>John Smith</Name>                              --- 
    <CreditCard Limit='5,000' Currency='USD'>            --- 
      <Number>4019 2445 0277 5567</Number>               --- 
      <Issuer>Example Bank</Issuer>                      --- 
      <Expiration>04/02</Expiration>                     --- 
    </CreditCard>                                        --- 
  </PaymentInfo>                                         --- 
  
  encrpyted one
  ---
    <?xml version='1.0'?>
  <PaymentInfo xmlns='http://example.org/paymentv2'>
    <Name>John Smith</Name>
    <EncryptedData Type='http://www.w3.org/2001/04/xmlenc#Element'
     xmlns='http://www.w3.org/2001/04/xmlenc#'>
      <CipherData>
        <CipherValue>A23B45C56</CipherValue>
      </CipherData>
    </EncryptedData>
  </PaymentInfo>
  
3) for majority of the problems apache has solutions as jars
https://commons.apache.org/ all java related apache jars like apache dbUtils, commons, xml sec, 
https://hc.apache.org/httpclient-legacy/index.html only for http calls
https://projects.apache.org/projects.html?language#Java all java related projects

